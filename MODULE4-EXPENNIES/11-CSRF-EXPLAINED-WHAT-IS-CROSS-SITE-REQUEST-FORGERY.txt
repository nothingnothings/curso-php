







O QUE É CSRF/CRFX?








-> A DEFINIÇÃO FORMAL É 


''CSRF IS AN ATTACK THAT __FORCES__ AN 
END USER TO EXECUTE __ UNWANTED ACTIONS ON A 

WEB APPLICATION IN WHICH THEY ARE __CURRENTLY AUTHENTICATED...''




''WITH A LITTLE HELP OF SOCIAL ENGINEERING,
SUCH AS SENDING A __ LINK__ VIA EMAIL OR CHAT,
AN ATTACKER MAY __TRICK__ THE USERS 
OF A WEB APPLICATION INTO EXECUTING ACTIONS 
OF THE ATTACKER'S CHOOSING. IF THE VICTIM IS 
A NORMAL USER,
A SUCCESSFUL CSRF ATTACK CAN __fORCE__ THE USER 
TO PERFORM STATE CHANGING REQUESTS,
LIKE TRANSFERRING FUNDS, CHANGING THEIR EMAIL ADDRESS 
AND ETC... IF THE VICTIM IS AN ADMINISTRATIVE ACCOUNT,
CSRF CAN COMPROMISE THE ENTIRE APPLICATION''...



 







 -> RESUMINDO: CSRF ATTACK ENVOLVE 


 1 REQUEST QUE É FEITO 'IN THE USER'S BEHALF'...






 -> É UM 
 FORGE DO REQUEST,

 EM QUE O USER É 'TRICKED INTO MAKING THAT REQUEST'....





-> E 1 REQUEST PODE SER FORJADO DE MÚLTIPLAS MANEIRAS...









1a MANEIRA --> ''MAN IN THE MIDDLE (MITM) attack''...

                --> COM ESSE TIPO DE ATAQUE,

                1 CÓDIGO JAVASCRIPT É 

                INJETADO E ENTÃO EXECUTADO, DENTRO
                 
                 DO SITE, POR MEIO DE XSS VULNERABILITIES 
                 (1 request é feito de OUTRO SITE,
                 em que o request envia 1 request ao target 
                 website e etc... ) 










OK... MAS DEVEMOS FALAR SOBRE:



1) HOW EXACTLY IS A CSRF ATTACK 
    CONSTRUCTED 






2) HOW IT WORKS....














--> EXPLICAÇÃO:




''WHEN WE MAKE REQUESTS,
THE COOKIES ARE AUTOMATICALLY 
TRANSMITTED BY THE HEADER...''






''THE HEADER CAN ALSO INCLUDE THE SESSION COOKIES,
    WHICH COULD BE USED FOR AUTHENTICATION''...






-> ''IF THE USER IS ALREADY AUTHENTICATED 
AND THE FORGED REQUEST IS MADE, EVEN IF IT'S FROM 
ANOTHER WEBSITE, IT CAN __ CARRY OVER THE SAME SESSION 
COOKIE... WHICH LETS THE SERVER KNOW THAT THE 
REQUEST IS LEGIT, AND THAT THE USER IS AUTHENTICATED''....

















AGORA VEJA ESTE EXEMPLO:






1) USER LOGS INTO A WEBAPP... DOESN'T MATTER WHICH ONE....






2) ATTACK TRIES TO TRICK THE USER INTO CLICKING 
    A LINK THAT CONTAINS THE MALICIOUS SCRIPT 



(THEY DO THIS BY _ MAYBE SENDING AN EMAIL,
LIKE

'CLICK THIS AWESOME PICTURE', OU 'VC GANHOU 1 NOVO PLANETA')....







-> AÍ QUANDO VC CLICA NAQUELA COISA,

O SCRIPT MALICIOSO É EXECUTADO...









-> AÍ, QUANDO A PAGE É ABERTA,


O SCRIPT MALICIOSO É EXECUTADO....





--> E O HACKER NÃO PRECISA FORÇAR O USER A REALIZAR 
ACTION ALGUMA PARA EXECUTAR O SCRIPT... 
O QUE DISPARA O SCRIPT PODE SER ''A SIMPLE AJAX REQUEST'',
QUE É TRIGGADO NO MOMENTO EM QUE O USER ABRE A PÁGINA
 ESPECIFICADA, POR EXEMPLO....















-> certo...







MAS O QUE PODEMOS FAZER, PARA PREVENIR

 ESSES CSRF ATTACKS?











-> UMA MANEIRA USADA, BEM CLÁSSICA,


É 


A 



'Synchronizer Token Pattern'...













-> ESTUDAREMOS ESSE 
SySTEM, NESTA AULA...











--> MAS COMO PODEMOS FAZER ISSO?










-> basicamente, 


''WE GENERATE A TOKEN,
 


ON THE SERVER, EITHER FOR EACH REQUEST, OR 

FOR EACH PAGE LOAD''....








-> E 'PARA CADA REQUEST''
PODE SER


MEIO OVERKILL,


e pode ser annoying quando fazemos ajax requests,


pq aí sempre 

teremos/teríamos que  primeiramente'fetch the token from the site',


antes de fazer o request....





--> uma alternativa 
SERIA FAZER A TOKEN SER RE-GENERATED SEMPRE QUE 
A PAGE CARREGA
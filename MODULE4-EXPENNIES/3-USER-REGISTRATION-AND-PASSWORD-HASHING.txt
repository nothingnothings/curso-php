











-> OK... 








NO ÚLTIMO VIDEO, FIZEMOS 

1 POUCO DE DATA MODELING,


EM QUE CRIAMOS 


ENTITIES,


E TAMBÉM SUAS RELATIONSHIPS...












JÁ NESTA AULA VEREMOS 

A FEATURE DE USER AUTHENTICATION..





-> O PROFESSOR JÁ CRIOU A UI 


PARA O USER REGISTRATION E LOGIN...










-> MAS É SÓ A UI,

ELA AINDA NÃO FUNCIONA...







O PROFESSOR TAMBÉM JÁ CRIOU 


O CONTROLLER 'AUTHCONTROLLER',

COM ALGUMAS ROUTES...






O CÓDIGO DE AUTHCONTROLLER É ESTE:








<?php

declare(strict_types=1);

use Psr\Http\Message\RequestInterface as Request;
use Psr\Http\Message\ResponseInterface as Response;


class AuthController
{

    public function __construct(private readonly Twig $twig) {}

    public function loginView(Request $request, Response $response): Response
    {


        return $this->twig->render($response, 'auth/login.twig');
    }



    public function registerView(Request $request, Response $response): Response
    {


        return $this->twig->render($response, 'auth/register.twig');
    }



    public function register(Request $request, Response $response): Response
    {

        // TODO: Implement user registration 

        return $response;
    }
}









E


O CÓDIGO DE 'web.php',

encontrado dentro 

de 'configs->routes->web.php',


é este: 







<?php

declare(strict_types=1);

use App\Controllers\HomeController;
use Slim\App;

return function (App $app) {
    $app->get('/', [HomeController::class, 'index']);


    $app->get('/login', [AuthController::class, 'loginView']);
    $app->get('/register', [AuthController::class, 'registerView']);
    $app->post('/login', [AuthController::class, 'login']);
    $app->post('/register', [AuthController::class, 'register']);
};










BASICAMENTE,


SÃO 2 METHODS QUE RETORNAM VIEWS,


E 1 METHOD QUE FAZ O REGISTER/CREATE DO USER,










COM A ROUTE DE POST...










-> MAS ANTES DE PROSSEGUIRMOS,
  O PROFESSOR 



  RECOMENDA QUE RODEMO 

  'docker-compose up -d --build',

  PARA REBUILDAR OS CONTAINERS,

  POIS ELE FEZ ALGUNS AJUSTES..









  -> ELE AJUSTOU O ARQUIVO YML,



  PQ DEIXOU 

  'ports:
    - 9003:9003',


para fazer o xdebug funcionar apropriadamente..
















ELE TAMBÉM 




ADICIONOU A LINHA DE 


''
      - ./local.ini:/usr/local/etc/php/conf.d/local.ini



''







ele fez isso para que consigamos ter 

nosso arquivo php.ini customizado,



em que podemos 



modificar algumas das configuration


options,




como 


'fastcgi.logging = Off'....













---> O PROFESSOR DEFINIU ESSA OPTION COMO 'Off'

PARA EVITAR 




O ERRO 502, GATEWAY ERRORS,

COM O NGINX...










-> SE VC ESTIVER USANDO DOCKER E NGINX,
    COM PHP-FPM,


    VC 

    TEM QUE SEMPRE SEGUIR ESTES PASSOS:









1) REBUILDAR OS CONTAINERS 


2) RODAR NPM RUN DEV PARA BUILDAR OS ASSETS..




3) RODAR COMPOSER INSTALL PARA INSTALAR TODAS AS DEPENDENCIES 
    DO BACKEND...













CERTO... AGORA VAMOS COMEÇAR..










PRIMEIRAMENTE ABRIMOS O AUTHCONTROLLER...









-> A PRIMEIRA COISA QUE O PROFESSOR QUER FAZER É 

O 

'DUMP' 
dE TODOS OS POST PARAMETERS,

DENTRO 

DE NOSSOS METHODS DE 'AuthController',

PARA USO POSTERIOR..

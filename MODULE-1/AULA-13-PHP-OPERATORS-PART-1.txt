







ok...









UM OPERATOR, PARA COLOCAR EM TERMOS SIMPLES,


É SIMPLESMENTE ALGO QUE 






___ ACEITA 1 OU MÚLTIPLAS EXPRESSIONS 

E RETORNA 1 VALUE...











--> O PHP OFERECE MÚLTIPLOS OPERATORS,



E OS VEREMOS
NESTE VÍDEO...











-> SE 1 OPERATOR 


__aCEITA/EXIGE APENAS 1 VALUE,




ELE É CHAMADO 



DE ""UNARY OPERATOR"" (é um termo geral)...









------> UM EXEMPLO DE UNARY OPERATOR 

É O __ BANG...









! --> BANG ...











ESSE VALUE ADICIONA UM ""NOT"" A ALGUMA COISA...








-> SE 1 OPERATOR __ aCEITA/EXIGE 2 VALUES,

ELE É CHAMADO _DE _ BINARY OPERATOR...







UM EXEMPLO CLÁSSICO DE BINARY OPERATOR É "+"






//BINARY OPERATOR -->  SAO OPERATORS QUE ACEITAM/EXIGEM 2 VALUES,
 ATUAM SOBRE 2 VALUES... A MAIOR PARTE DOS PHP OPERATORS É DESTE TIPO...












 -> BINARY OPERATORS EXIGEM 2 

 OPERANDS...







 ----> SE 1 OPERATOR __ EXIGE __ 3 VALUES,

 ELE É 


 CHAMADO DE ___ TERNARY OPERATOR...











 UM EXEMPLO DE __ TERNARY OPERATOR,

 NO PHP,


 É 

 ESTE:










 ?: 










 -> VEREMOS O QUE É ELE...






 -------------------------------------












 COMEÇAMOS PELOS ARITHMETIC OPERATORS...








+ - * / % **








TE DEIXAM RODAR OPERACOES COMO ADICOES,

SUBTRACOES,

MULTIPLICACOES,

DIVISOES,

""MODULES""


e EXPONENCIACAO...






















tipo assim:












$x = 10;
$y = 2;

var_dump($x + $y);
var_dump($x - $y);
var_dump($x * $y);
var_dump($x / $y);










EX:






$x = 10;
$y = 2;

var_dump($x + $y);
var_dump($x - $y);
var_dump($x * $y);
var_dump($x / $y);
var_dump($x % $y); //retorna 0 (é o resto dessa divisao)
var_dump($x ** $y); //retorna 100 (10 na segunda potencia)











----> É CLARO QUE ESSAS OPERATIONS TAMBÉM FUNCIONAM 



COM NÚMEROS NEGATIVOS...












-> OK... O PROFESSOR PRIMEIRAMENTE QUER FALAR SOBRE OS OPERATORS DE ADD E SUBTRACTION...












--> VC PODE USAR OS 2 PARA PREFIXAR VALUES OU VARIABLES...




--> SE VC FIZER ISSO,

VC __ PODE CONVERTER AQUELE VALUE PARA OU UMA INTEGER,


OU UM FLOAT...
















por exemplo, se tivermos 5 COMO UMA STRING...






$exemplo = +'5'; // se colocarmos o + na frente, ele será convertido para uma INTEGRAL...












$exemplo = +'5'; //ISSO SERÁ CASTADO COMO UMA INTEGER...


var_dump($exemplo); //retornará int(5);
















--> E O MESMO SE APLICA PARA NÚMEROS NEGATIVOS...










$exemplo2 = -'5'; //ISSO SERÁ CASTADO COMO UMA INTEGER...


var_dump($exemplo); //retornará int(-5);  (É A MESMA COISA QUE O CÓDIGO DE CIMA, MAS CONVERTE PARA UMA INT NEGATIVA)...








-------------------------------













OK... ISSO É LEGAL.. ASSIM PODEMOS CONVERTER NÚMEROS-STRINGS EM INTS...









--> CERTO... AGORA DEVEMOS DIVIDIR X POR Y...










var_dump($x / $y); 









COM ISSO, FICAMOS COM 5...
















--> COM DIVISOES, O TYPE DO RESULT _ SEMPRE SERÁ FLOAT,


A NAO SER QUE.... AMBOS OS OPERANDS SEJAM

INTEGERS,



E 


ELES SEJAM __ EVENLY DIVISIBLE...









EX:

$x = 10;
$y = 2;



var_dump($x / $y); //vai retornar 1 integer pq OS 2 OPERANDS SAO INTEGERS, E SAO EVENLY DIVISIBLE...
















--> OK... MAS SE NAO FOSSEM EVENLY DIVISIBLE,



O RESULTADO SERIA 1 FLOAT...



TIPO ASSIM:







$zzz = 10;

$www = 3;


var_dump($zzz / $www); //RETORNA 3.3333333 (float)










EX:







$q = 10;

$t = 2.0; //isto é um float


var_dump($q / $t); //retorna 5 (MAS de TYPE FLOAT...).... (RETORNOU FLOAT PQ 1 DOS OPERANDS É UM FLOAT, O 2.0 é um float...)






---------------------------------












OK... OUTRO DETALHE --> SE VC DIVIDIR 

ALGUM NUMBER POR 0,



SEU APP VAI QUEBRAR, 

VAI PARAR DE RODAR,

E VC 


VAI GANHAR 1 ERROR....



-----------------------------







-----> ENTRETANTO, SE VC ESTIVER TRABALHANDO COM UMA VERSAO DO PHP 



__ ANTERIOR __ À VERSAO 8,



VC __ SÓ VAI GANHAR 1 WARNING (o app nao vai quebrar),


E VC 


VAI CONSEGUIR 1 VALUE... MAS ESSE VALUE SERÁ INFINITY..





===============================







SE VC QUISER ___EVITAR___ O COMPORTAMENTO DO PHP 8,

QUE QUEBRA O SEU APP,






EM CASES EM QUE VC __ QUER__ CONSEGUIR O INFINITY COMO VALUE,



quando divide por 0,




VC __PODE _ USAR _ UMA FUNCTION QUE FOI INTRODUZIDA 

NO PHP8,




QUE 


É A FUNCTION DE fdiv()
















-> A FUNCTION DE fdiv()



EXIGE OS 2 ARGUMENTS -> devemos passá-los...












var_dump(fdiv($x, $y));









SE VC RODAR ISSO AÍ, ELE VAI TENTAR DIVIDIR POR 0, MAS NAO VAI 

DAR THROW DE UM ERROR,

E SIM VAI APENAS 

RETORNAR ""INFINITY"" ( ou seja, ficaremos com o comportamento 
de divisao por 0 do php ANTERIOR à versao 8....)









EX:







$someNumber = 10;

$aNastyZero = 0;




var_dump(fdiv($someNumber, $aNastyZero)); //vai retornar float(INF)...


















OK....
 






 A PRÓXIMA DICA É SOBRE 







 O OPERATOR DE ""MODULUS""










 O MODULUS É ISTO --> % ...









 -> SABEMOS QUE O OPERATOR DE MODULUS SIMPLESMENTE NOS DÁ 

 O 

 """RESTO"" DE UMA DIVISAO entre 2 operands... (se ele existir... se nao existir,
 ganhamos 0)...








 EX:







$xxxx2 = 10;
$yyyy2 = 2;


var_dump($xxxx2 % $yyyy2); //vai retornar int(1) --> JUSTAMENTE PQ EXISTIRÁ RESTO NA DIVISAO ENTRE 10 E 2 (que será 1)...

















------> se deixamos 10 e 6,


o modulus será de 4... (o resto será 4)...











--> O DETALHE, AQUI, É QUE 

AMBOS 



OPERANDS _ SERAO CASTADOS __ COMO INTEGERS... ( ou seja, se eram 

floats, serao castados como INTEGERS, vao perder 
as casas decimais) ANTES DE OCORRER A DIVISAO...












EX:









// --> O DETALHE, AQUI, É QUE 

// AMBOS 



// OPERANDS _ SERAO CASTADOS __ COMO INTEGERS... ( ou seja, se eram 

// floats, serao castados como INTEGERS, vao perder 
// as casas decimais) ANTES DE OCORRER A DIVISAO...

// EXEMPLO:



$aFloatValue1 = 10.5;

$aFloatValue2 = 2.9;


var_dump($aFloatValue1 % $aFloatValue2); //vai retornar int(0), pq ambos values serao castados como 10 e 2, e aí o resto dessa divisao é 0...











--> ok.... isso é PERIGOSO..







pq __ os floats vao ser convertidos antes de ocorrer essa operation 
de modulus, e isso é meio errático....









--> O PROFESSOR DIZ QUE SE DESEJAMOS 


REALIZAR 



UMA MODULUS OPERATION 


COM FLOAT NUMBERS,


DEVEMOS 


USAR 



1 FUNCTION 


CHAMADA 

DE 

""fmod()"",






E AÍ DEVEMOS PASSAR AMBOS PARAMETERS,


TIPO ASSIM:













// MAS COMO PODEMOS REALIZAR MODULUS OPERATION EM FLOAT VALUES, ENTAO...





// DEVEMOS USAR A FUNCTION DE fmod() -> E ENTAO PASSAR OS 2 VALUES/OPERANDS,


// tipo assim:





var_dump(fmod($aFloatValue1, $aFloatValue2)); //vai retornar float(1.800000000003);





--------------------









OUTRA COISA QUE DEVEMOS SABER, QUANDO TRABALHAMOS COM O MOD OPERATOR,


É QUE 

QUANDO TRABALHAMOS COM NÚMEROS NEGATIVOS,






O __ _SINAL __ DO RESULTADO_ _



É TIRADO _ DO NUMBER QUE 

VC ESTAVA DIVIDINDO...









EXEMPLO:







$x = 10;
$y = -3;





var_dump($x % $y);






O RESULTADO DISSO AINDA SERÁ """" int(1)"""",





ISSO PQ O sinal vai ser tirado 

DO NÚMERO QUE VC ESTÁ DIVIDINDO... (o x, no caso)...











EXEMPLO DE RESULTADO NEGATIVO:








$x = -10;
$y = 3;





var_dump($x % $y); ///vai resultar em -1...



----------------------------









AGORA DEVEMOS VER OS ASSIGNMENT OPERATORS...













O ASSIGNMENT OPERATOR BASICO É 




"=" --> ELE ASSIGNA O VALUE 


DA DIREITA 

PARA O VALUE DA ESQUERDA..




ex:









$x = 5;















NAO DEVEMOS CONFUNDIR O ASSIGNMENT OPERATOR COM 


OS COMPARISON OPERATORS (== e ===)...






NUNCA ESCREVA ISTO:








if ($x = 5) {


},








PQ AÍ VC ESTARÁ ASSIGNANDO O VALUE DE 5 AO X...










-------------












ALÉM DISSO,

É POSSÍVEL ASSIGNAR MÚLTIPLAS VARIABLES AO MESMO TEMPO...










--> COMO FAZER ISSO...








BASTA ESCREVER ASSIM:








$x = $y = 10;










EX:









// ALÉM DISSO,

// É POSSÍVEL ASSIGNAR MÚLTIPLAS VARIABLES AO MESMO TEMPO...





// tipo assim:


$variable1 = $variable2 = 10; //ambas variables terao o value de 10...















TAMBÉM É POSSÍVEL 







TER ASSIGNMENTS MAIS COMPLEXOS,



COMO ESTE:










$x = ($y = 10) + 5;








COM ISSO,

ESTAMOS DIZENDO QUE 


Y SERÁ ASSIGNADO COMO 10,

E QUE 

X 

SERÁ ASSIGNADO COMO 15 (e é horrível  de ler)...











-> O CÓDIGO FICA HORRÍVEL DE LER...












TEMOS TAMBÉM OS COMBINED OPERATORS, EXATAMENTE COMO NO JAVASCRIPT...



sao shorthands para 


os ARITHMETIC OPERATORS...






TIPO ASSIM:












$x = $x * 3;






$x *= 3;







------------------




OUTRO DETALHE SOBRE ASSIGNMENTS....









ASSIGNMENTS SAO 

FEITOS _POR VALUE, 


E NAO POR REFERENCE... -> JÁ VIMOS ISSO ANTES... É O MESMO 

PRINCÍPIO DO JAVASCRIPT...
















--> AGORA O PROFESSOR FALA DE STRING OPERATORS...









// STRING OPERATORS --> TEMOS "." (concatenation) e .= (CONCATENATION COM ASSIGNMENT)....








EX:










// EX:






$we = "Hello";



$we = $we . 'World'; //sem shorthand



$we .= 'World'; //COM SHORTHAN (vai concatenar e definir o value de $we como essa concatenacao de hello + world) ...









--------------------------------------










DEPOIS, TEMOS OS COMPARISON OPERATORS...







ELES NOS DEIXAM COMPARAR 2 VALUES...











sao os classicos:









== 


=== 


!= 

!==











STRICT COMPARISON -> É O COM 3 IGUAIS...






COMPARISON COMUM (loose comparison) --> É O COM 2 IGUAIS...













A DIFERENCA 

ENTRE OS 2 É QUE 



O LOOSE COMPARISON 


__FAZ A """TYPE CONVERSION"" PARA NÓS...








JÁ O === NAO FAZ ESSA TYPE CONVERSION...



É STRICT...  -> ELE TAMBÉM CHECA O DATA TYPE DO VALUE












certo....













EX:










$xtzz = 5;


$ytzz = '5';



var_dump($xtzz == $ytzz); //vai retornar bool(true) (mesmo os 2 data types sendo diferentes... forced type conversion)...


var_dump($xtzz === $ytzz); //vai retornar bool(FALSE)  (pq nao sao iguais, sao 2 data types completamente diferentes, string e int)




// O PRIMEIRO DUMP VAI RETORNAR bool(true)  (bem estranho, pq os DATA TYPES SAO DIFERENTES, SAO NUMBER E STRING) -- idiossincrasia do PHP... forced type conversion...

// O SEGUNDO DUMP VAI RETORNAR bool(FALSE) (O QUE FAZ SENTIDO, PQ OS 2 DATA TYPES SAO REALMENTE DIFERENTES)...

























--> OK...








PARA CHECAR POR INEQUALITY,






BASTA RODAR 

!= 



ou 


!==








------------------







quer dizer que 

SE TEMOS ISTO:









$x = 5;


$y = 5;




var_dump($x == $y); //vai retornar bool(true)


var_dump($x === $y); //vai retornar bool(true)








OS 2 VAO RETORNAR TRUE PQ OS 2 SAO 5,



E OS 2 VALUES POSSUEM DATA TYPE DE INT...




















---> UMA MANEIRA ALTERNATIVA DE 

ESCREVER 

"!=" 









é ISTO -->   "" <> "" (operator de LOOSE INEQUALITY)...










-----------------------








DEPOIS TEMOS OS OPERATORS CLÁSSICOS DE OPERACAO,






> 

<



>= 



<=








-------------------------------








TEMOS UM OPERATOR COMPLETAMENTE 


DIFERENTE...






É O SPACESHIP OPERATOR...







ELE É ESCRITO ASSIM:



<=>





ELE ESSENCIALMENTE COMBINA 

O 

<= 

e o =>












é usado tipo assim:








var_dump($x <=> $y);






var_dump($x <=> $y); //retorna 0 se X FOR IGUAL A Y.... retorna -1 SE X É MENOR DO QUE Y, E RETORNA 1 SE __ O X __ FOR MAIOR DO QUE O Y...












retorna 0 se X FOR IGUAL A Y.... 


retorna -1 SE X É MENOR DO QUE Y, 


E RETORNA 1 SE __ O X __ FOR MAIOR DO QUE O Y...
















Ex:









$x = 5;


$y = 10;


var_dump($x <=> $y); 






--> AQUI RECEBEREMOS -1,


PQ O 

X É MENOR DO QUE O Y...








--------------












ANTES DE EXAMINARMOS OS OUTROS OPERATORS,

O PROFESSOR QUER 

FALAR SOBRE ALGUMAS COISAS IMPORTANTES...












POR EXEMPLO...










ANTES DO PHP8,


QUANDO UMA STRING ___ ERA COMPARADA A 1 NUMBER,




A STRING ERA CONVERTIDA A 1 NUMBER ANTES 


DA COMPARACAO... 






---------------------------------












POR EXEMPLO, temos esta expressao:









var_dump(0 == 'hello');



NO PHP 7.4,


ESSA STRING AÍ 

SERIA 
CONVERTIDA 

EM UM NUMBER... NESSA CONVERSAO, 

A STRING SERIA CONVERTIDA A 0... ->  e entao 

0 == 0 RETORNARIA TRUE....












EX:








var_dump(0 == 'hello');


// ^^^^^^^^^^
// NO PHP 7.4,


// ESSA STRING AÍ 

// SERIA 
// CONVERTIDA 

// EM UM NUMBER... NESSA CONVERSAO, 

// A STRING SERIA CONVERTIDA A 0... ->  e entao 

// 0 == 0 RETORNARIA TRUE....
















MAS NO PHP8,



ESSA STRING NAO É MAIS CONVERTIDA EM 1 NUMBER...



EM VEZ DISSO,

O QUE ACONTECE 



É QUE 

_ QUANDO A STRING NAO É NUMÉRICA,



____ O OUTRO __ LADO __ É QUE SERÁ CONVERTIDO ___ EM UMA STRING___...








DEPOIS DESSA CONVERSAO DO OUTRO LADO EM STRING,

OCORRE UMA STRING COMPARISON...








QUER DIZER QUE, NO PHP8,

OCORRE ISTO:






ISTO:


var_dump(0 == 'hello');



VIRA ISTO:


var_dump('0' == 'hello');









E É CLARO QUE ESSA EXPRESSION RESULTA EM FALSE,

PQ OS VALUES DAS STRINGS NAO SAO IGUAIS...



















ou seja,


no php 7.4 essa expressao resultaria em true...




no PHP 8,

ESSA EXPRESSAO RESULTARÁ EM __ FALSE_...






---------------------------------------












MAS SE ESCREVERMOS 




var_dump(0 == '0');




ISSO VAI RETORNAR TRUE (também no php 8)... --> PQ 


O 

'0' É STRING,


MAS ELE SERÁ CONVERTIDO EM INT PELO PHP,

E AÍ A COMPARACAO OCORRERÁ...










--> O PROFESSOR É UM GRANDE FA DE 

STRICT TYPING E STRICT COMPARISONS...







DEVEMOS TAMBÉM SEMPRE USAR STRICT COMPARISONS, QUANDO POSSÍVEL... PARA 

EVITAR ERROS EM POTENCIAL...











--> O PROFESSOR MOSTRA 1 EXEMPLO EM QUE 

STRICT COMPARISON SERIA MT IMPORTANTE...











PROFESSOR ESCREVE ESTE CÓDIGO:







$x = 'Hello World!';
$y = strpos($x, 'H');









COM ESSA FUNCTION,

SERÁ BUSCADA A LETRA H dentro daquela string,


E AÍ 

RETORNARÁ 


O __ INDEX __ EM QUE ESTÁ ESSA LETRA...









// exemplo da importancia de STRICT COMPARISON..


$x = 'Hello World';


$y = strpos($x, 'H'); //vai retornar 0... (pq é A PRIMEIRA LETRA DA STRING)..


if ($y == false) {
    echo 'H not found';
} else {
    echo 'H found';
}










NO CASO,


o negócio VAI ENTRAR EM 'Not Found',

MESMO 



ESSA STRING TENDO SIDO ENCONTRADA DENTRO DA VARIÁVEL, COM strpos().... 



ISSO ACONTECEU PQ 



""0"" é castado como FALSE, no php,

e aí 
isso fez com que entrássemos no if block...












strpos() 


É UMA FUNCTION QUE RETORNA 




OU O NÚMERO (int) 

DA POSICAO EM QUE FOI ENCONTRADA AQUELA LETRA/SUB-STRING DENTRO DA STRING,

OU 

ENTAO 


RETORNA FALSE (se nao foi encontrada essa substring dentro daquela 
string)....







-> AQUI, NO CASO, ELA RETORNARIA 0 (encontrou a string)  ou false (nao encontrou a string)...





ELA ENCONTROU, POR ISSO RETORNOU 0... mas o 0 foi considerado como false pelo 

php,


dentro daquela LOOSE COMPARISON (com ==),

O QUE 

FEZ COM QUE ENTRÁSSEMOS NO IF BLOCk....














EX:












// agora o mesmo código, mas revisado e com lógica correta (e com STRICT COMPARISON, do false... que é diferente de 0, na verdade)...







// ex:





$xb = 'Hello World';


$yb = strpos($xb, 'H'); //vai retornar 0... (pq é A PRIMEIRA LETRA DA STRING)... SE NAO ENCONTRAR ESSA STRING, RETORNARÁ FALSE...


if ($yb === false) {  ///evitamos de entrar nesse if block, pq 0 NAO É IGUAL A ""false"" (diferentes data types, int vs boolean)...
    echo 'H not found';
} else {
    echo 'H found';
}







---------










certo... sempre use strict comparisons...





----------------------










POR FIM, TEMOS ESTES 2 OPERATORS...
















O OPERATOR 


?? 



e 


o 


?:










// ?: --> É UM TERNARY OPERATOR...









?: 

É UM SHORTHAND 


PARA 
IF-ELSE EXPRESSIONS...









TIPO ASSIM:
















aaahn... 



o professor quis dizer ? : (mesma coisa que o javascript)..














EX:













$ternaryResult = $yb === false ? 'H Not Found' : 'H Found at Index' . $y;



echo $ternaryResult;














--> ok... faz sentido...










É A MESMA COISA QUE O JAVASCRIPT...












TAMBÉM É POSSÍVEL STACKAR TERNARY OPERATORS...






MAS FICA MT RUIM DE LER...











-> MAS QUANDO VC STACKAR TERNARY OPERATORS,

SEMPRE USE () --> POR 2 RAZOES:








1) NAO USAR PARENTESES FOI DEPRECADO NO PHP 7.4...





2) É BEM MAIS LEGÍVEL...









-------------------------------









O OUTRO 



CONDITIONAL OPERATOR É 

CHAMADO 

DE 

""NULL COALLESCING OPERATOR"",


E 

ELE 

É PRINCIPALMENTE USADO 

QUANDO TRABALHAMOS COM NULLS...











--------------------------------------












O EXEMPLO É ESTE:









$x = null;




$y = $x ?? 'hello';




var_dump($y);










O VAR_DUMP DE y  VAI __ RESULTAR 



EM HELLO...





mas pq isso?










-> RESUMINDO...:










""""A VARIÁVEL ___ b APENAS SERÁ 

HELLO _ SE a _ FOR IGUAL A NULL""""  





"""" E SE a variável a NAO for null,

A VARIÁVEL b VAI SER IGUAL AO VALUE DE 
a""..... ( ou seja, será a mesma coisa que a)..









EX:








$x = "exemplo';



$y = $x ?? 'hello';











isso acontecerá (o $y terá o mesmo value de $x) 

ATÉ MESMO SE O $x FOR false (
    o caso de $y ser 'hello'

    SÓ VAI ACONTECER 

    SE $x for REALMENTE NULL...
)








-------------------















CERTO...










ESSE OPERATOR, DE NULL COALESCING,



PODE _SER ÚTIL ___ QUANDO 

VC 


TRABALHA 


COM:





1) UNDEFINED VARIABLES 




2) UNDEFINED ARRAY KEYS...







------------------------








POR EXEMPLO,



IMAGINE QUE NUNCA DEFINIMOS A VARIABLE DE $x...:











$y = $x ?? 'hello';










-> SE X NUNCA FOI DEFINIDO, 



X SERÁ NULL... --> SE X FOR NULL,


o 

$y terá um value de HELLO...




----------------------












CERTO...







O PROFESSOR SPLITA ESSE VIDEO, TEREMOS OUTRO 
VIDEO,

EM QUE 


VEREMOS O RESTO DOS OPERATORS...

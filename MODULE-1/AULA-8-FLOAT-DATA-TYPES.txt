












            CERTO....







            FLOATING POINT NUMBERS 


            SAO OS NUMBERS QUE 
            POSSUEM CASAS DECIMAIS...















    COMECAMOS ASSIM:








    $x = 13.5;






echo $x;













VC TAMBÉM PODE 



REPRESENTAR FLOATING NUMBERS 

EM FORMAS EXPONENCIAIS...





TIPO  ASSIM:










$x = 13.5e3;









EX:









<?php 



$x = 13.5; //floating point 






$y = 13.5e3; /// REPRESENTACAO DE FLOAT POINT NUMBERS COM EXPONENTIAL FORM --->    e2 = 100;  e1 = 10; e0 = 1;, etc...



















USAMOS e0, e1, e2, e3 para REPRESENTAR 10 na alguma coisa...












--> TAMBÉM PODEMOS 


REPRESENTAR NÚMEROS NEGATIVOS COM FLOAT POINTS,

E TAMBÉM 


NÚMEROS 

FRACIONADOS, POR MEIO 


DE e-(alguma coisa)...












tipo 





13.5e-3, que vira 





13.5  .  1/1000









EX:







$zzz = 13.5e-3; ////vira 13.5  . 1/1000












EX:





$x = 13.5; //floating point 

$y = 13.5e3; /// REPRESENTACAO DE FLOAT POINT NUMBERS COM EXPONENTIAL FORM (VIRA 13500) --->    e2 = 100;  e1 = 10; e0 = 1;, etc...

$zzz = 13.5e-3; // vira 13.5  . 1/1000


















PODEMOS CONFIRMAR SE 1 VARIABLE 

É FLOAT POR MEIO DE:











1) var_dump($x) --> vai dizer float(number) 






2) is_float($x) --> vai dizer true ou false...












-->  se escrevemos algo como 13.5e3 ,




e usamos var_dump,


ele ainda vai dizer que é um float (mesmo resultando em 1 integer)...











--> CERTO...






TAMBÉM OUTRO DETALHE..









-> AQUELE DETALHE DE READABILITY...











$xyz = 13_000.5;









UNDERLINES SERVEM APENAS PARA READABILITY (sao ignorados pelo PHP)...















TEMOS TAMBÉM AQUELAS BUILT-IN CONSTS 


DE PHP_FLOAT_MAX 



E 


PHP_FLOAT_MIN








EX:











echo PHP_FLOAT_MAX;



echo PHP_FLOAT_MIN;













--> A PRINCIPAL COISA QUE DEVEMOS TER EM MENTE, QUANDO TRABALHAMOS COM FLOATS,

É SUA PRECISAO LIMITADA...














----> POR EXEMPLO,



SE 
ESCREVEMOS ISTO:








floor((0.1 + 0.7) * 10); ------> VOCE PODERIA PENSAR QUE 

ISSO RETORNARIA 8...





pq 0.1 + 0.8 = 0.8 * 10 = 8...






-> MAS SE REFRESHAMOS, FICAMOS COM 7...



ISSO ACONTECE PQ __ 




__ 0.1 e 0.7 

NAO 
POSSUEM 1 REPRESENTACAO 

EXATA 



COMO 1 FLOAT POINT NUMBER 

EM BASE 2 (binary),




E BINARY É USADO INTERNAMENTE PARA REPRESENTAR OS FLOATING POINT NUMBERS..
















--> E COMO ISSO É CONVERTIDO PARA BINÁRIO,



PERDEMOS UM POUCO DA PRECISION...











O NÚMERO QUE RESULTA DESSA EXPRESSAO NA VERDADE É ESTE NÚMERO:










7.999999999999999999991118 












-> CERTO... E COMO ""FLOOR"" ROUNDS ALL NUMBER DOWN,





O NEGÓCIO REMOVE TODA  PARTE .999999999999999,

e aí ficamos com 7...










-> NAO DEVEMOS NOS IMPORTAR TANTO COM ISSO AGORA..










-> ISSO TEM A VER COM OPERATORS...






 


floor -->  rounds everything down...







ceil --> rounds everything up..





















OK....










AGORA DIGAMOS QUE 

TEMOS ISTO:








ceil((0.1 + 0.2) * 10);












--> ISSO RESULTA EM 4...






PQ O RESULTADO É 


0.3000000000000000000000004  (imprecisao),

O QUE 

ACABA SENDO 





RESOLVED PARA 4 (por conta do ceil)....











RESUMO:








____ NUNCA _ CONFIE__ NOS FLOAT_  NUMBERS__ ATÉ 


O ÚLTIMO DÍGITO... E NUNCA COMPARE FLOATING NUMBERS DIRETAMENTE POR EQUALITY...





















----> O PROFESSOR NOS MOSTRA 1 EXEMPLO SOBRE O COMPARE DE FLOATS DIRETAMENTE...











-> digamos que temos 








$q = 0.23;

$t = 1 - 0.77;







--> CERTO.... COM ISSO, AMBAS  VARIABLES TEORICAMENTE DEVERIAM 


SER 0.23..














MAS SE COMPARAMOS AS 2 VARIABLES,

COM 




if ($x == $y) {
    echo 'Yes';
} else {
    echo 'No';
}








EX:












$q = 0.23;

$t = 1 - 0.77; //? TEORICAMENTE, AMBAS VARIABLES DEVERIAM SER IGUAIS...




if ($q == $t) {
    echo 'Yes';
} else {
    echo 'No'; //ENTRAREMOS NESSE BLOCK, PQ OS 2 NAO SERAO  EXATAMENTE IGUAIS...
}















É POR ISSO QUE NAO DEVEMOS COMPARAR FLOATS ASSIM...














OK...









OUTRO DETALHE....












------>



ALGUMAS OPERATIONS/CALCULOS





TALVEZ RESULTEM EM 1 VALUE DE ""UNDEFINED"""









---> ESSE VALUE DE UNDEFINED É CHAMADO DE ""NAN"" (not a number)...













VOCE CONSEGUE 

ESSE RESULT __ SEMPRE _ QUANDO ALGUMA OPERATION/CALCULATION NAO 

CONSEGUE SER COMPUTADA...









-> TAMBÉM HÁ OUTRA 


CONSTANTE, CHAMADA DE ""INFINITY"",



que é escrita com 

INF...






INF; //REPRESENTA O INFINITO (infinity)...







echo INF; //vc ganha INF quando VC VAI OUT OF BOUNDS DE 1 FLOAT...





















--> O INFINITY PODE SER OBTIDO SE VC FAZ CALCULOS COMO 



MULTIPLICAR 

""PHP_FLOAT_MAX"" por 2...









VC NAO CONSEGUE REPRESENTAR ISSO,



PUSHA O NUMBER MÁXIMO DE FLOAT OVER THE BOUNDS..







--> TAMBÉM VC NUNCA DEVE 
COMPARAR 

1 

VARIABLE 

DIRETAMENTE A 1 INFINITY...








-> E VC TAMBÉM NUNCA DEVE COMPARAR 1 VARIABLE DIRETAMENTE A '"NAN""















se vc quer comparar coisas com nan/inf,


VOCE DEVE USAR AS BUILT-IN FUNCTIONS DE is_nan 


e is_inf...














EX:












is_infinite($veryInfinite); //retornará true


is_finite($veryInfinite); //retornará false




is_nan($veryInfinite)














também existe o is_finite()...











--> FINALMENTE,


ANTES DE ACABAR ESTE VIDEO,


DEVEMOS FALAR SOBRE CASTING...










DIGAMOS QUE VC TEM 1 INT,





TIPO ASSIM:










$myInt = 5;



var_dump($myInt); 









ISSO VAI RESULTAR EM int(5)...










VC PODERIA CONVERTER ISSO EM FLOAT,

BASTA ESCREVER 

ASSIM:





var_dump((float) $myInt); 











EX:









$myInt = 5;


var_dump((float) $myInt);  // com isso, essa variable será castada como FLOAT (mesmo sendo 1 int)... -> e o var_dump vai retornar float(5)...





















--> A MANEIRA ALTERNATIVA DISSO É CHAMAR floatval()..










MAS O PROFESSOR NAO GOSTA DE CHAMAR UNECESSARY FUNCTIONS...









-> O PROFESSOR ACHA MELHOR ESCREVER ""(float)""


para castar esse int como float...











--> ALGUMAS COISAS QUE 

VC DEVE TER EM MENTE 
QUANDO CONVERTEMOS 



OUTROS DATA TYPES EM FLOATS:













SE TENTAMOS CONVERTER 1 STRING QUE NAO TEM NUMERO NO INTERIOR,

ELA SERÁ CONVERTIDA,
 

 com (float),

 EM 




 0..






 tipo assim:








 $floatNumber = "assadasdds";


 var_dump((float) $floatNumber);









 EX:










 $floatNumber = "assadasdds";


var_dump((float) $floatNumber); // isso vai resultar em float(0) --> PQ NAO TEMOS NENHUM NUMBER DENTRO DAQUELA STRING..


















-> JÁ SE TIVERMOS 1 NUMBER DENTRO DA STRING,




O NEGÓCIO VAI FICAR float(number_dentro_ da_string)...




EX:




$realFloatNumber = "15.5aaa";

var_dump((float) $realFloatNumber); //isso vai resultar em float(15.5) ---> PQ TIRAMOS O ACTUAL NUMBER VALUE de dentro daquela string...


















NO PRÓXIMO VIDEO, FALAREMOS SOBRE STRINGS...
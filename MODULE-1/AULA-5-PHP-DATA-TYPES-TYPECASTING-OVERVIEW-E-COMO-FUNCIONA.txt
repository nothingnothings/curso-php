







AGORA O PROFESSOR QUER FALAR SOBRE OS TYPES


E TYPECASTING NO PHP...










EX:













<?php




/* Data Types e Type Casting */




# 4 SCALAR TYPES 

    # bool 
    # int 
    # float 
    # string




# 4 COMPOUND TYPES 

    # array 
    # object 
    # callable 
    # iterable


# 2 SPECIAL TYPES
    # resource 
    # null
















OK...







O PHP 

É 





DYNAMICALLY

TYPED...










-> É DYNAMICALLY OU __ WEAKLY TYPED.... É A MESMA COISA...










--> É UMA LANGUAGE EM QUE 




NAO É NECESSÁRIO 




__ DEFINIR O TYPE DE SUA VARIABLE... E O TYPE DA VARIABLE 

PODE MUDAR 



__DEPOIS _ DA VARIABLE 

TER SIDO 


DEFINIDA...











->  E """DYNAMICALLY TYPED LANGUAGE"" --> SIGNIFICA QUE 



__ O TYPE CHECKING __ OCORRE DURANTE _ 
O RUNTIME... O QUE É HORRÍVEL...










JÁ STATICALLY TYPED LANGUAGE ->  SIGNIFICA QUE 


O TYPE CHECKING OCORRE DURANTE 



O COMPILE TIME...











--> POR EXEMPLO,


JAVA, C++ E C# SAO 

STATICALLY TYPED LANGUAGES...













--> CERTO... COMO O PHP 


PERMITE 



ESSE TYPE SYSTEM,


ELE É MAIS FLEXÍVEL...





MAS ESSA FLEXIBILIDADE VEM A 1 CUSTO.... PERFORMANCE,

E 

TAMBÉM

BUGS INESPERADOS...





-> ENTRETANTO,

O PHP 



TEM 

MELHORADO MT SEU TYPE SYSTEM, 

PRINCIPALMENTE 

NAS ÚLTIMAS VERSOES...







-->  E O PHP ATÉ MESMO SUPORTA STRICT TYPES...












-->  O PHP SUPORTA 10 PRIMITIVE TYPES...











ESSES PRIMITIVE TYPES SAO AGRUPADOS EM 



<?php




/* Data Types e Type Casting */




# 4 SCALAR TYPES 

    # bool 
    # int 
    # float 
    # string




# 4 COMPOUND TYPES 

    # array 
    # object 
    # callable 
    # iterable


# 2 SPECIAL TYPES
    # resource 
    # null














--> CERTO...





TAMBÉM EXISTEM OUTROS 2 PSEUDOTYPES,

QUE 

SAO 

USADOS 

PRINCIPALMENTE 

PARA MELHORAR READABILITY...




(ESSES PSEUDOTYPES SAO CHAMADOS DE ""MIXED'" E ""VOID"")...









---> MAS AGORA O PROFESSOR 


VAI 

FALAR 



SOBRE OS TYPES...










--> O PROFESSOR VAI DEDICAR 1 VIDEO PARA CADA TYPE...










--> O PROFESSOR QUER DISCUTIR 


OS TYPES SEPARADAMENTE..











OS 4 TYPES ESCALARES SAO:





1) BOOLEAN 

2) INT 


3) FLOAT 

4) STRING....













--> BOOLEAN--> TRUE OU FALSE  --> É A SIMPLES REPRESENTACAO 

DE 

1 TRUTH OU FALSE VALUE..










INTEGERS --> SAO OS NUMERIC VALUES SEM AS CASAS DECIMAIS,...

SAO CONHECIDOS COMO NUMEROS INTEIROS...





1,2,3,4,0,-5...











FLOATS SAO DECIMALS/FLOATING POINT NUMBERS,


COMO 

1.5,

0.1,

0.00005, -15.8









EX:







# 4 SCALAR TYPES 

    # bool - true/false
    # int  1,2,3,4,5, 0, -5 (sem decimais)
    # float - 1.5, 0.1, 0.000004, -15.8
    # string













POR FIM,

TEMOS STRING...









-------> STRINGS --> SAO SIMPLESMENTE UMA SERIE DE CARACTERES,

QUE 
SAO ENVELOPADAS 

COM "" OU ''...










CERTO...












# 4 SCALAR TYPES 

    # bool - true/false
    # int  1,2,3,4,5, 0, -5 (sem decimais)
    # float - 1.5, 0.1, 0.000004, -15.8
    # string  - "Gio", 'Hello World'
















AGORA VAMOS DEFINIR ALGUNS DESSES VALUES COMO VARIABLES,


PARA AÍ OS PRINTARMOS NA TELA...













TIPO ASSIM:










<?php




/* Data Types e Type Casting */




# 4 SCALAR TYPES 

    # bool - true/false
    $completed = true;
    # int  1,2,3,4,5, 0, -5 (sem decimais)
    $score = 75;
    # float - 1.5, 0.1, 0.000004, -15.8
    $price = 0.99;
    # string  - "Gio", 'Hello World'
    $greeting = ''




# 4 COMPOUND TYPES 

    # array 
    # object 
    # callable 
    # iterable


# 2 SPECIAL TYPES
    # resource 
    # null











    aí os printamos na tela...











EX:










# 4 SCALAR TYPES 

# bool - true/false
$completed = true;
# int  1,2,3,4,5, 0, -5 (sem decimais)
$score = 75;
# float - 1.5, 0.1, 0.000004, -15.8
$price = 0.99;
# string  - "Gio", 'Hello World'
$greeting = '';



echo $completed . '<br />';
echo $score . '<br />';
echo $price . '<br />';
echo $greeting . '<br />';
















-> certo...











---> o primeiro 



value foi printado como "1" na tela..





isso pode nao fazer tanto sentido,

mas vc 

DEVE TER EM MENTE QUE 


""QUANDO PRINTAMOS TRUE,

ELE VAI FICAR PRINTADO COMO 1, NO PHP""













""""E, NO PHP, 

QUANDO PRINTAMOS FALSE,

A COISA QUE É PRINTADA É BLANK (ou seja, nada, ou seja, ) """













-------> OK...









MAS É CLARO QUE __ QUANDO PRINTAMOS 


ALGUMA COISA, NO PHP,

ISSO NAO INDICA O TIPO DE DATA DE UMA VARIÁVEL....



------> PARA TER CERTEZA ABSOLUTA DO TIPO DE DATA DE UMA VARIÁVEL,


PODEMOS USAR 

A FUNCTION DE "gettype()"  (é tipo o typeof operator, do Javascript)...













----> ok... A OUTRA MANEIRA DE CONSEGUIR SABER O DATA TYPE 

DE 

1 VARIABLE 

É POR MEIO DO USO 




DE """""var_dump()"""""





var_dump(variable_name)

















EX:






echo var_dump($completed); ///var_dump outputta toda a informacao existente sobre  1 variable, seu type, etc...

















SE RODAMOS ISSO AÍ,










ELE PRINTA  O VALUE _ QUE A VARIÁVEL SEGURA, E TAMBÉM O DATA TYPE DA VARIÁVEL,


QUE É 

""bool"", nesse caso...







ex: 






bool(true)












EX:











var_dump($completed); ///var_dump outputta toda a informacao existente sobre  1 variable, seu type, etc...
// var_dump($completed); -- vai printar 'bool(true)'

var_dump($greeting);  /// -- vai printar 'string(9) Hello Gio'


















OK... ESSES SAO OS BASICS DOS 4 SCALAR TYPES...










MAS O PROFESSOR VAI NOS MOSTRAR 




MAIS DETAILS SOBRE CADA TYPE....











-> ISSO PQ _ EXISTEM INFOS IMPORTANTES


QUE 

VC 


PRECISA 


SABER __ SOBRE __ COMO __ 


TODOS _ __ ESSES VALUES_ SAO CASTADOS COMO DIFERENTES 

TYPES,



E SOBRE _ COMO SAO HANDLADOS PELO PHP...












-------------------------------------









OK... ARRAY --> É BASICAMENTE 1 LISTA DE ITEMS...









-> E ESSES ITEMS PODEM SER DE QUALQUER TIPO...








--> PODE TER 1 LISTA DE INTEGERS,

DE BOOLEANS,

DE MIXED BOOLEANS E INTEGERS,

FLOATS,

ETC...








-> VEREMOS MAIS TYPES DE ARRAYS EM 1 VIDEO SEPARADO..











EX:








$companies = [];






ISSO SIMPLESMENTE INDICA QUE ESSE É UM ARRAY VAZIO...






ex:






$companies = [1,2,3,4,5,0,-5, -4, 'a', 'b'];



















-> OK... É BASICAMENTE UMA LISTA DE ITEMS...











MAS COMO PRINTAMOS ARRAYS?










SE RODAMOS








"" echo $companies;"",





ISSO VAI 

APENAS 

PRINTAR 


A PALAVRA "array" -->  e isso aí 



vai te dar 1 erro,



pq o php vai tentar converter 1 array em  string,



e isso 


FALHA (pq 
o php nao sabe como converter 1 array em 1 string...)




















--> OK...





O OUTPUT DE ERROR 

PODE 



SER DIFERENTE,

DEPENDENDO 



DE COMO O ERROR REPORTING 

ESTÁ DEFINIDO,
LÁ NO SEU 

ARQUIVO 

php.ini...











--> O PROFESSOR FALARÁ SOBRE A CONFIGURACAO DO ARQUIVO 

php.ini 


EM 1 VIDEO SEPARADO...







E TAMBÉM 
SOBRE COMO 


SETTAR _ DIFERENTES _ ERROR REPORTING LEVELS,

NESSE ARQUIVO php.ini...













-> UMA MANEIRA 

BOA DE PRINTAR ARRAYS É POR MEIO 


DA FUNCTION 



print_r()













EX:













$companies = ['e', 'x', 'e', 'm', 'p', 'l', 'o'];


// echo $companies; //nao vai funcionar (nao é possível printar arrays assim, com echo --- resulta em 1 error)...



print_r($companies); // isso funciona (printa array em 1 readable form)











O VAR_DUMP TAMBÉM FUNCIONA COM ARRAYS...





ex:





$companies = ['e', 'x', 'e', 'm', 'p', 'l', 'o'];


var_dump($companies);





------------------------------







O PRINT_R PRINTA O ARRAY EM 1 FORMATO 



MAIS 

READABLE..




O PROFESSOR FALARÁ MAIS 

SOBRE ARRAYS EM 1 VIDEO SEPARADO...












--> OS 3 ÚLTIMOS COMPOUND TYPES 



SAO 



OBJECT 



CALLABLE 



E 

ITERABLE..













SAO TYPES 1 POUCO AVANCADOS..







--> O PROF TERÁ VIDEOS DEDICADOS A ESSES TYPES...









POR FIM, TEMOS OS 2 SPECIAL RESOURCE TYPES...














RESOURCE --> TAMBÉM É MEIO ESPECIAL... TEREMOS 1 VIDEO SEPARADO,,

DEDICADO A ELE...












NULL -> SIMPLESMENTE SIGNIFICA ""NO VALUE"", OU NADA...















--> ok... AGORA QUE SABEMOS OS BASICS DOS DATA TYPES EM PHP,




QUEREMOS SABER:










$score = 75;














-- COMO DIABOS O PHP SABE QUE ESSE VALUE É UM INTEGER...











-> ISSO PQ _ NÓS NAO DECLARAMOS EM NENHUM LUGAR 

QUE 

ISSO 

É UM INTEGER... QUE ESSA VARIABLE É UM INTEGER --> E SIM 


APENAS 


DEFINIMOS QUE O VALUE DE SCORE É 75..











--> e quando 
FAZEMOS O var_dump 

dessa 

variable,




é claro que ela nos dá 


""iNTEGER""...

(int)..












ISSO ACONTECE, NO CASO, 







PQ _ O PHP __ AUTOMATICAMENTE DETERMINA O DATA TYPE _ DURANTE O RUNTIME...












O PHP BASICAMENTE ""FIGURES OUT""




QUE VC ESTÁ TENTANDO 



DEFINIR 

ESSA VARIAVEL COMO 1 INTEGER 

PQ _ NAO TEMOS NENHUMA QUOTE EM VOLTA DESSE VARIABLE...












SE COLOCAMOS QUOTES EM VOLTA,
 TIPO ASSIM:







$score = '75';






AÍ SE TENTARMOS O VAR_DUMP, DE NOVO, ELE RETORNA ISTO:






var_dump($score) -------->  string(2)















--> OK.... TAMBÉM HÁ 
O CONCEITO 

DE 


""TYPE HINTING",







QUE OCORRE DENTRO 



DAS SUAS FUNCTIONS E CLASS PROPERTIES...












--> O PROFESSOR MOSTRARÁ FUNCTIONS E CLASS PROPERTIES EM 

1 

VIDEO SEPARADO...











MAS AQUI ELE QUER NOS MOSTRAR 
UM EXEMPLO DE O QUE É O TYPE HINTING,

E 

COMO FUNCIONA...
















-> PARA ISSO,



ELE CRIA 1 FUNCTION,

QUE 

VAI SOMAR 2 VARIABLES,

E AÍ VAI RETORNAR 1 O VALUE..








EX:






function sum($x, $y)
{

    return $x + $y;
}


















--> AQUI, NO CASO,


O PROFESSOR VAI SIMPLESMENTE FAZER 

ECHO 


DO CALL DE sum(2,3)..










EX









function sum($x, $y)
{

    return $x + $y;
}








echo sum(2, 3);















OK... PQ FIZEMOS ISSO?









É PARA DEMONSTRAR QUE O 


PHP 


AUTOMATICAMENTE/dinamicamente

ASSIGNOU DATA TYPES 


A ESSES VARIABLES...












--> SE FIZERMOS var_dump em cima de x e y,

dentro dessa function:







function sum($x, $y) {

    var_dump($x, $y);  ///retorna int(2) e int(3)

    return $x + $y;
}



echo sum(2, 5);















CERTO.... MAS E SE PASSÁSSEMOS ALGO COMO 1 STRING, COMO SEGUNDO PARAM?













ex:









function sumMix($x, $y)
{

    var_dump($x, $y);

    return $x + $y;
}


echo sumMix(2, '3');













--> com isso, 

SE RODAMOS ESSA FUNCTION,

O NEGÓCIO VAI OUTPUTTAR 


int(2) e string(1).... (comportamento esperado)...














EX:







function sumMix($x, $y)
{

    var_dump($x, $y); //retorna int(2) e string(1) -->  

    return $x + $y; //mas o value retornado será um INTEGER... (e nao uma string)...
}


$intResult = sumMix(2, '3');


echo $intResult;


var_dump($intResult); // dirá que o output daquele function call (que soma int + string) SERÁ UMA INT...


















O COMPORTAMENTO INESPERADO A MIM,
AQUI,

É QUE 


A SOMA 

DE 

2 VALUES,




2 VALUES DE TYPES INT E STRING,



RESULTARÁ 



EM __ UMA _ INTEGER,


E NAO 

EM 
 UMA STRING...













EX:















function sumMix($x, $y)
{

    var_dump($x, $y); //retorna int(2) e string(1) -->  
    echo '<br />';
    return $x + $y; //mas o value retornado será um INTEGER... (e nao uma string)...
}


$intResult = sumMix(2, '3');


echo $intResult;


var_dump($intResult); // dirá que o output daquele function call (que soma int + string) SERÁ UMA INT...
















OK...
 



 MAS O QUE MAIS PODEMOS DIZER...









 PODERÍAMOS 




 ESPECIFICAR QUE 


 OS TYPES DE x e y sao _ INTEGERS, E NAO STRINGS...






 TIPO ASSIM:












 
function declareTypesMix(int $x, int $y) {

    var_dump($x, $y); ///vai printar ""int(3)"" e ""int(5)"" --> sim, mesmo QUE O VALUE DE 5 TENHA SIDO CHAMADO COMO STRING ('5')...

    return $x + $y;
}




$declareTypesIntResult = declareTypesMix(3, '5');


echo $declareTypesIntResult;














--> ISSO É CHAMADO DE _ TYPE JUGGLING...










-> TYPE JUGGLING OU TYPE COHERSION -------> BASICAMENTE,




ISSO QUER DIZER QUE 


""O DATA TYPE DE 1 VARIABLE 

DEPENDE DO CONTEXTO EM QUE ESSA VARIABLE ESTÁ SENDO USADA""





OU SEJA,


MESMO 

NÓS 

TENDO 
TIPADO QUE 

O GIVEN VALUE SERIA UMA INTEGER,

o

PHP 

AINDA 


TENTOU CONVERTER 





_ O GIVEN VALUE DA FUNCTION AO DATA TYPE APROPRIADO....








--> por exemplo:







function declareTypesMix(int $x, int $y) { //QUER DIZER QUE ESSES TYPES QUE DECLARAMOS AQUI SERAO IGNORADOS, PELO PHP, SE ELE CONSIDERAR QUE FAZ MAIS SENTIDO OUTRO DATA TYPE, A DEPENDER DO CONTEXTO DE RUN DAS FUNCTIONS E ETC...

    var_dump($x, $y); ///vai printar ""int(3)"" e ""int(5)"" --> sim, mesmo QUE O VALUE DE 5 TENHA SIDO CHAMADO COMO STRING ('5')...

    return $x + $y;
}






$declareTypesIntResult2 = declareTypesMix(3.5, '5'); //aqui estamos passando um FLOAT, e NAO UM INTEGER...
// e esse FLOAT É CONVERTIDO EM 1 INTEGER, PELO PHP, PQ DEFINIMOS "int $x" (isso vai overwrittar o type que passamos) --> QUER DIZER QUE ESSE VALUE SERÁ LIDO COMO "3" (INT) pelo php, e nao como "3.5" (float)...

echo $declareTypesIntResult;


echo $declareTypesIntResult2;










-----------------------------










CERTO...







quer dizer que concatenar strings é totalmente diferente, com o php....









EX:












function sum2(string $x, string $y)
{

    var_dump($x, $y);
    return $x + $y;
}







$example = sum2(3, '6'); //ainda será uma INT, o resultado (e os números ainda serao somados)





var_dump($example);













ESSA SOMA VAI RESULTAR EM 9... (mesmo tendo 1 string e 1 number, e mesmo tendo os 
2 types como strings...)






----------------
















function sum4($x, $y)
{

    var_dump($x, $y);
    return $x + $y;
}


$exemplo5 = sum4(4.212131231232, '3');



var_dump($exemplo5); ///resultado será um float, e será  float(7.212131231232)






















-->  QUER DIZER QUE O TYPE DE 1 VARIABLE 


É DETERMINADA PELO CONTEXTO EM QUE 




ESSA VARIABLE É USADA...














SE PASSAMOS 2.5 E 3 COMO ARGUMENTOS,



FICAMOS COM 5 COMO RESULTADO,




ISSO PQ DECLARAMOS QUE O TYPE DEVERIA SER DE INT,

NAQUELE PARAMETER...





















-> E SE O PHP NAO FOR CAPAZ 

DE FAZER ISSO DINAMICAMENTE (esse type cohersion/juggling),



ELE VAI FAZER THROW DE 1 ERROR...
















-----> para conseguir um erro,
podemos escrever assim:











function sum(array $x, int $y) {


    var_dump($x, $y);
    return $x + $y;

}




sum(2.5, '3');























function sumArray(array $x, int $y) {


    var_dump($x, $y);
    return $x + $y;

}




sum(2.5, '3'); ///isso vai dar um ERROR (pq 2.5 nao é um array, e o php, ao tentar converter 2.5 para um array, vai dar throw desse error...)


















ISSO VAI NOS DAR 1 FATAL ERROR...












--> OUTRO DETALHE IMPORTANTE:::::






O TYPE DE 1 VARIABLE __ SÓ __ É GARANTIDAMENTE 


1 CERTO TYPE __ ATÉ __ 



1 PONTO ESPECÍFICO...











O QUE ISSO QUER DIZER?









-> BEM, DIGAMOS 

QUE 



COLOCAMOS 





function sum(int $x, int $y) {


}










----> ISSO QUER DIZER QUE O TYPE DE $x SERÁ 


DE ""INTEGER"" 


__________aPENAS_ ATÉ CHEGAR NO MOMENTO EM QUE ESSA FUNCTION RECEBE 

ESSE PARAMETER (

    ela vai garantidamente receber esse paramter 

    como int, 

    TIPO ISSO...
)








QUER DIZER QUE 

DEPOIS DESSE MOMENTO, DEPOIS DO RECEIVE 


DESSE PARAMETER PELA FUNCTION,

O TYPE 


DE X PODERIA MUDAR...








-> EX:






function sum(int $x, int $y) { //x vai chegar garantidamente como de type ""INTEGER""


$x = 5.5;  //nessa linha, o data type de x já terá sido alterado, alterado para TYPE FLOAT... (e nao integer)...


}














->  E ISSO, ESSE COMPORTAMENTO,

É PERFEITAMENTE ACEITÁVEL NO PHP...






















-> professor só queria mostrar isso, o básico, nesse video..













-----> certo...




MAS HÁ UMA MANEIRA _ DE ENABLAR __ 



"""STRICT MODE"""


NO PHP...













-> O STRICT MODE BASICAMENTE 


SIGNIFICA QUE 


""""SERÁ FEITO O THROW DE 1 ERROR 

SE 
VC 


TENTAR PASSAR OUTRO TYPE 

A 

1 FUNCTION 



QUE TINHA 1 CERTO TYPE DEFINIDO...



















--> NO STRICT MODE,
VC VAI RECEBER 1 ERRO 



ATÉ MESMO SE VC TENTAR FAZER PASS 


DE 1 PARAMETER 

QUE __ __ PODERIA_ SER CONVERTIDO DINAMICAMENTE (


    como passar 1 float a 1 param de type INTEGER...
)












-> MAS COMO PODEMOS ENABLAR STRIC TYPES? (mt útil)














-> bem, 

PODEMOS 

ENABLAR 


STRICT TYPES 


POR MEIO 


DO CÓDIGO/METHOD DE 






declare(strict_types=1);


















OK... MAS MEU IDE ESTÁ MAL CONFIGURADO...









EX:









<?php



declare(strict_types=1);  //esse metho/alteracao _ ENABLE _ O STRICT TYPE... (só poderemos passar values com data types adequados como params de nossas functions.. senao, recebemos 1 error)...






function sum(int $x, int $y) {
    return $x + $y;
}   




$sum = sum(2, '4');











EX:












<?php



declare(strict_types=1);  //esse method/alteracao _ ENABLE _ O STRICT TYPE... (só poderemos passar values com data types adequados como params de nossas functions.. senao, recebemos 1 error)...






function sum(int $x, int $y) {
    return $x + $y;
}   




$sum = sum(2, '4');














BEM, MAS O QUE INTERESSA É QUE 

GANHAMOS 





FATAL ERROR...



PHP Fatal error:  Uncaught TypeError: sum(): Argument #2 ($y) must be of type int, string given, called in A:\PROJETO20-PHP-FROM-THE-GROUND-UP\AULAS\exemplo-primeiro-serve\quarto-index-php\example-strict-types.php on line 19 and defined in A:\PROJETO20-PHP-FROM-THE-GROUND-UP\AULAS\exemplo-primeiro-serve\quarto-index-php\example-strict-types.php:12
Stack trace:
#0 A:\PROJETO20-PHP-FROM-THE-GROUND-UP\AULAS\exemplo-primeiro-serve\quarto-index-php\example-strict-types.php(19): sum()
#1 {main}
  thrown in A:\PROJETO20-PHP-FROM-THE-GROUND-UP\AULAS\exemplo-primeiro-serve\quarto-index-php\example-strict-types.php on line 12
PS A:\PROJETO20-PHP-FROM-THE-GROUND-UP\AULAS\exemplo-primeiro-serve\quarto-index-php> 



------------------------------------




















--> mas é claro que essa coisa de type hinting,


no 

php, é super bugada (
    por exemplo, integers sao considerados 

    FLOATS, 


    o que quer dizer que 

    se vc rodar 







function sum(float $x, float $y) {
    return $x + $y;
}   


$sum = sum(2,3);





)


,


ESSE NEGÓCIO AINDA VAI FUNCIONAR.... nao terá throw de error...



















-> VC DEVE USAR TYPE HINTING 

E STRICT TYPES 


O MÁXIMO POSSÍVEL...

















--> O PROFESSOR PREFERE,


DEVEMOS USAR STRICT TYPES 




O MAXIMO POSSÍVEL --> PROVIDENCIA 


QUALIDADE 

MELHOR 

DE CÓDIGO,
E EVITA 
BUGS INESPERADOS..



















--> OK... .


AGORA O PROFESSOR 


QUER MOSTRAR TYPE CASTING..




















--> DEFINIMOS UMA VARIÁVEL DE Z,





EM STRINGS:









$z = '5';



var_dump($x); //vai printar string(1) "5"









---------------------------------












O PROFESSOR NOS EXPLICA QUE É POSSÍVEL FORCAR 






ESSA STRING 


A SER 1 _ INT DATA TYPE..









-> VC PODE __ CASTAR __ QUALQUER COISA 

COMO QUALQUER DATA TYPE,

NO PHP..









SE VC QUISER _ CASTAR__ ISSO COMO 


INTEGER,


A SINTAXE É ASSIM:








$z = (int) '5';

















EX:










$z = '5';



var_dump($x); //vai printar string(1) "5"







$z = (int) '5';   //? COM ISSO, CONSEGUIMOS _ CASTAR QUALQUER VALUE COMO QUALQUER TYPE (aqui castamos 1 STRING como INTEGER, como se ela fosse 1 numbeR)...


















--> é claro que isso pode levar a problemas no nosso código,

se nao tivermos cuidado...









VAMOS ESCREVER CÓDIGO PHP...



ABRA A PASTA DE HTDOCS 



NO CODE EDITOR...








-> CERTO...







AÍ FICAMOS COM OS FILES 


DO HTDOCS...





DENTRO DALI,




O PROFESSOR DIZ QUE VAMOS CRIAR 1 ARQUIVO INDEX.PHP...










A PRIMEIRA COISA QUE DEVEMOS FAZER,

SE QUISERMOS QUE NOSSA FILE SEJA INTERPRETADA COMO PHP,




É 

ESCREVER A MARCACAO 



<?php





















--------> TAMBÉM PRECISAMOS QUE NOSSO ARQUIVO ACABE COM .php,
e nao 



.html...













-> AS PHP FILES 


TAMBÉM PODEM TER 


HTML, CSS E JAVASCRIPT 

NO INTERIOR DELAS,


O QUE QUER DIZER QUE 


VC VAI TRABALHAR EXATAMENTE DA MESMA FORMA,

COM ELAS...













-> OK... A MANEIRA PELA QUAL O 

PHP É PARSEADO 


É QUE 


O INTERPRETER 
PROCURA 

PELAS OPENING E CLOSING TAGS...










--> E AÍ ELE VAI INTERPRETAR 
TUDO 


NO MEIO 


DESSA MARCACAO COMO PHP...












-> AS OPENING E CLOSING TAGS 

SAO 





<?php ?>






CERTo...






















-> TUDO QUE FICAR NO MEIO DESSE CODE BLOCK SERÁ 

INTERPRETADO
 
 COMO PHP...


















--> CERTO... EM ALGUNS EDITORS,






O NEGÓCIO DIRÁ 


QUE 
O
 


?> 

É UMA 


REDUNDANT 

CLOSING TAG ---------> ISSO ACONTECE SE SEU 

ARQUIVO 



__ CONTER __ APENAS __ 

CÓDIGO PHP...













-> SE SEU CÓDIGO É 100% PHP,







VC __ NAO __ DEVE TER ESSA CLOSING TAG,

É DESNECESSÁRIA... -> NESSES CASOS,

VC 

NAO 
DEVE 

TER 


ESSA CLOSING TAG..













MAS PQ ISSO?









É PARA GARANTIR QUE __ NENHUM ACCIDENTAL 




__ EXTRA WHITE SPACE OU LINHAS EXTRAS __ SEJAM 


ADICIONADAS 



DEPOIS 



DO PHP CLOSING TAG (

    pq isso poderia 

    MESS UP SEU SITE...
)













EXEMPLO:




----------------------------


<?php 





?> 






Hello 

--------------------------








--> ESSE HELLO APARECERIA NO NOSSO SITE,



APARECERIA ""BY MISTAKE"",






PQ __ O CÓDIGO 

COLOCADO DO LADO DE FORA TAMBÉM VAI APARECER 

NA PÁGINA (




    ESSE ESPAÇO INDESEJADO 

    E TEXTO INDESEJADO 

    APARECERAO NA PÁGINA...
)












--> CERTO....











É POR ISSO QUE 

A REGRA GERAL É 

""SE SEU ARQUIVO 

POSSUI APENAS CÓDIGO PHP,


AÍ VC NAO DEVE TER A CLOSING TAG"" -->   MAS 
SE 

VC 


ESTIVER 


__FAZENDO __ EMBED _ 

DE SEU 

CÓDIGO 



PHP __ 






DENTRO __ DE SEU CÓDIGO HTML,

AÍ 

VC 


__PRECISA __ 



ESCREVER AS TAGS COM OPENING E CLOSING...















CERTO...










AGORA, NO CASO,


O PROFESSOR VAI QUERER FAZER PRINT DE ""Hello World""

NA TELA...












-> PARA ISSO,
ELE USA 
O CÓDIGO 

DE 




""echo 'Hello World';""












COM ISSO,


SE REFRESHAMOS 



A PÁGINA,

FICAMOS 

COM 


"Hello world" na tela...




















CERTO... COM ISSO,




SE INSPECIONAMOS O ELEMENTO,


VEREMOS 

APENAS 


""HELLO WORLD"",


SEM NENHUM OUTRO CÓDIGO PHP...










VEREMOS ""HELLO WORLD"" 



JUSTAMENTE PQ __ O PHP É UMA __ SERVERSIDE LANGUAGE...










-> ISSO PODE PARECER SIMPLES,

ESSE CÓDIGO AÍ,


MAS NA VERDADE ELE NOS INTRODUZIU A 3 DIFERENTES COISAS:









1) ECHO --> É O QUE VC UTILIZA PARA __ PRINTAR _ ALGO NA TELA...


O NOSSO TEXT É ENCLOSED COM SINGLE OU DOUBLE QUOTES....











2) PRECISAMOS ACABAR NOSSOS STATEMENTS COM ;




SEMICOLON...





ACOSTUME-SE COM O WRITE DE 

SEMICOLON...




VC GANHA 1 PARSE ERROR  SEM TER "";""








-> há algumas exceptions em que 

a ; 
nao é necessária... ->  POR EXEMPLO,



SE __ VC __ ESTÁ FECHANDO A PHP TAG,



__ 
ELE
VAI DEIXAR 

IMPLÍCITO O ; na última linha antes 

do close tag...






tipo assim: 


<?php 


echo 'Hello World!'


?>










ISSO QUER DIZER QUE O 

";"


É INCLUÍDO, POR DEFAULT,

NA ÚLTIMA 

LINHA 

DE SEUS ARQUIVOS PHP... --> ISSO É ÚTIL 


EM CASOS _ EM QUE _ 



VC ESTÁ EMBEDDANDO PHP 
DENTRO 


DE HTML... -----> é só 1 single line que vc 

nao precisa 


de 

1 semi-colon....







3) VC TAMBÉM PODE EXECUTAR 


PHP SCRIPTS DE DENTRO DO SEU TERMINAL...












-> BASTA ABRIR O TERMINAL DO 



VSCODE 



E ENTAO 





RODAR php index.php...









<?php

echo "Hello World!";

?>








----> AÍ O HELLO WORLD APARECE NO TERMINAL...












OUTRA MANEIRA DE PRINTAR COISAS É ATRAVÉS DO COMANDO 



""print""...






--> mas o print É __DIFERENTE__ _DO ""echo""














AS DIFERENCAS SAO ESTAS: 








PRINT --> TEM 1 RETURN VALUE DE "1" --> ISSO SIGNIFICA QUE 


1 EXPRESSAO COMO "print 'Hello World'" 


TEM ACTUALLY UM VALUE DE "1"...






SIGNIFICA QUE ESSA EXPRESSION ACTUALLY RETORNA VALUE...











--> MAS QUAL É O EFEITO PRÁTICO DISSO?







bem,

se rodamos echo + print,

tipo assim:




echo print 'Hello World';













-> O  QUE ISSO VAI FAZER 


É 





__ PRINTAR _ ""Hello World"'



e entao vai 
FAZER APPEND 




DE ""1"" ao final...



(
    pq a expression de "print xx"" em si 

    RETORNA 1, AO FINAL...
)










--> É POR ISSO QUE, AO REFRESHARMOS A PAGE,

VEREMOS 




Hello World1..














CERTO... ISSO SIGNIFICA QUE



"""PRINT"" PODE SER USADO DENTRO DE EXPRESSOES...






JÁ ""ECHO"" NAO PODE SER USADO DENTRO 

DE EXPRESSIONS...












## ""PRINT"" 
PODE SER USADO DENTRO DE EXPRESSIONS, mas 
ECHO  NAO PODE... (por isso echo print é possível, mas print echo é impossível)...
























--> CERTO... FICAMOS COM 1 SYNTAX ERROR SE ESCREVEMOS 




print echo "frase";















--> OUTRA MANEIRA DE ESCREVER PRINT E ECHO 

é 

com 



print('Hello World');











tipo assim: 



echo print("EXEMPLO");




















A OUTRA DIFERENCA É QUE 



__ SE __


__ VC _ NAO USAR __ () no call 


do 

echo,



VC PODE _ACTUALLY _ FAZER ECHO DE MÚLTIPLAS COISAS,


SEPARADAS POR 

VÍRGULA..






TIPO ASSIM:












echo 'Hello', ' ', 'World';








COM ISSO, FICAMOS EXATAMENTE COM O MESMO OUTPUT DE ANTES,

MAS COM 1 SINTAXE DIFERENTE...














-> MAS SÓ PODEMOS FAZER ISSO, DE SEPARAR 



COISAS A SEREM ECOADAS COM ESPACOS, COM ESSA SINTAXE AÍ (de vírgulas),



COM O ECHO... COM O PRINT, ISSO NAO FUNCIONA...
















-> CERTO... 









OUTRO DETALHE É QUE 


__ ECHO _ É MARGINALMENTE 


MAIS RÁPIDO DO QUE PRINT... POR ISSO O PROFESSOR SUGERE QUE 

VC 

USE 

ECHO,

E NAO PRINT...










-> USE ECHO,

A NAO SER QUE VC TENHA 1 RAZAO ESPECIFICA

PARA USAR PRINT...













--> OK.... ANTES DE SEGUIRMOS PARA OUTRA COISA,





TEMOS...









E SE VC QUISESSE 


PRINTAR ALGO DIFERENTE,

COMO 



'Joe's House'''





ISSO NAO VAI FUNCIONAR,

PQ AS QUOTES ESTAO ERRADAS...







TEMOS QUE USAR "" para envelopar 

essa string,

e nao ''...










EX:













echo print("EXEMPLO");





echo 'Hello', ' ', 'World', ' ', 2;





echo "Joe's House";

















--> certo... isso é simples....






-> OU ENCLOSAMOS ESSA COISA COM DOUBLE QUOTES,


OU ENTAO 

USAMOS 

BACKSLASH..





TIPO ASSIM:




'Joe\'s Invoice';














A OUTRA MANEIRA É A CLÁSSICA,

ENCLOSE COM DOUBLE QUOTES...










-> OK...








MAS E SE QUISÉSSEMOS ASSIGNAR ESSES VALUES A VARIABLES?







PARA ASSIGNAR VARIABLES,

PRECISAMOS DO DOLLAR SIGN...




$variable = 'exemplo';




















mas há algumas regras 


sobre o define de variables 


no PHP...










--> VARIÁVEIS EM PHP...






1) DEVEM COMEÇAR OU __ COM 1 LETRA, OU COM 1 UNDERSCORE (_)....






2) --> a letra PODE SER UPPER OU LOWER,

MAS NAO PODE SER 

1 CARACTER ESPECIAL, NEM UM NUMERO (nao pode ser $exemplo ou 1exemplo)....











EX:







// $1variable = 'exemplo';  ## //!sintaxe INcorreta

// $@variable = 'exemplo';  ## //!sintaxe INcorreta




$variable = 'exemplo';  ##sintaxe correta
$Variable2 = 'exemplo2';  ##sintaxe correta
$_variable3 = 'exemplo3'; ## sintaxe correta


















SE NAO SEGUIMOS ESSAS DIRETRIZES,

FICAMOS COM SYNTAX ERRORS...













OUTRA REGRA...











--> NAO PODEMOS __ DEFINIR SPECIAL CHARACTERS,






COMO  $@name 













--> VC TAMBÉM  __ NAO PODE _ ASSIGNAR 1 VALUE _ 


A 

1 

VARIABLE COM NOME DE ""this"",



PQ 


THIS SE REFERE A OBJECTS... (reserved keyword)..












EX:"











// $1variable = 'exemplo';  ## //!sintaxe INcorreta

// $@variable = 'exemplo';  ## //!sintaxe INcorreta

// $this= 'exemplo'; ##//!SINTAXE INCORRETA (this = reserved keyword)...



$variable = 'exemplo';  ##sintaxe correta
$Variable2 = 'exemplo2';  ##sintaxe correta
$_variable3 = 'exemplo3'; ## sintaxe correta





















OK...






SE VC TENTAR DEFINIR 1 VARIABLE COM NOME DE THIS,

VC 

GANHA 

1 FATAL ERROR 

DE 

""CANNOT RE-ASSIGN $THIS IN ...""...














-> CERTO.... 







DEPOIS DISSO,


TEMOS A INFORMACAO 

DE 

QUE 
__ AS VARIABLES NO PHP,


POR DEFAULT,


SAO ""ASSIGNED BY VALUE"" ------> O PROFESSOR QUER DEMONSTRAR ISSO...
















-> DIGAMOS QUE TEMOS 


1 VARIÁVEL DE NOME X...





ex:








$x = 1;

$y = $x;













OK... ASSIGNAMOS O VALUE DE Y COMO SENDO IGUAL A 1...







-> SE ALTERAMOS O VALUE DE x para outra coisa,


E SE ENTAO TENTAMOS PRINTAR Y,



O QUE SERÁ PRINTADO SERÁ 1,



E NAO 

3 ( o value que foi alterado)...










EX:








// IMPORTANTE -> 



$x = 1;



$y = $x;


$x = 3;


echo $y; ## o que será printado será 1... ( e nao 3) --> isso acontece PQ VARIÁVEIS SAO ASSIGNADAS POR VALUE...













--> ESSE É O MESMO COMPORTAMENTO DO JAVASCRIPT...










-> VARIABLES SAO ASSIGNADAS POR VALUE...














--> OK.... MAS SE VC QUISER __ 

QUE _ 



Y MUDE _ SEMPRE QUE _ O X MUDAR,


VC __ VAI  _ PRECISAR _ 





DEFINIR VARIABLES POR ""REFERENCE"" EM VEZ DE VALUE (referential values vs primitive values)...













-> ISSO PODE PARECER CONFUSO,



MAS É BEM SIMPLES...







FALAREMOS MAIS SOBRE ISSO EM VIDEOS FUTUROS..














--> MAS PARA ASSIGNAR __ VALUES _ POR MEIO DE REFERENCE,




VC PRECISA ADICIONAR O SINAL & (ampersend) 



LÁ NA DEFINICAO 




DO VALUE DE y...





EX:








// IMPORTANTE -> 


// EXEMPLO DE ""ASSIGN VARIABLES BY REFERENCE"" (REFERENCE VALUES)... -> aqui existe o "&", que nao existe no javascript...


$x = 1;


$y = &$x; ## //TODO - EIS O CÓDIGO EM QUESTAO (assignamos o valor da variable por REFERENCE, e nao por value)... --> agora sempre que o VALUE DE X MUDAR, O VALUE DE Y MUDARÁ TAMBÉM...


$x = 3;


echo $y; ## o que será printado será 3... ( e nao 1) --> isso acontece PQ OVERWRITTAMOS O DEFAULT DE ""VARIABLES SAO ASSIGNED POR VALUE""...



## sempre que o X MUDAR, O  Y MUDARÁ TAMBÉM...




















CERTO....






AGORA QUE SABEMOS O QUE VARIÁVEIS SAO,


DEVEMOS CRIAR 1 VARIABLE 



DE NOME 


$firstName 


ou 


$first_name,








e entao RODARMOS 



echo 'Hello $firstName';










-> SE RODAMOS ISSO,





NAO É PRINTADO CORRETAMENTE...









--> ISSO ACONTECE PQ 



ESTAMOS SEM TEMPLATE STRINGS...







-> NAO SEI SE EXISTE TEMPLATE STRINGS NO PHP...







-> MAS O PROFESSOR EXPLICA QUE __ SE USARMOS _ DOUBLE QUOTES,




O VALUE DA VARIÁVEL SERÁ OUTPUTTADO  CORRETAMENTE...







-> É POR ISSO QUE ESCREVO ASSIM:









echo "Hello $firstName";












EX:















$firstName = 'Arthur';




echo 'My name is $firstName'; ## este output NAO FUNCIONARÁ (pq single quotes nao possuem expansion)


echo "My name is $firstName"; ##este output FUNCIONARÁ (pq DOUBLE QUOTES possuem expansion)...



















MAS O PROFESSOR ACHA QUE ESSA SINTAXE É UMA PORCARIA....







ELE ACHA QUE ISSO NÃO É READABLE...










-> O PROFESSOR 


ACHA QUE 

PODEMOS DEIXAR ISSO BEM MAIS LEGÍVEL
 



 POR MEIO DO ADD DE 

 {$variableName},


 TIPO ASSIM:








 // SINTAXE SUPERIOR DE OUTPUT É ESTA (mais legível):


// SINTAXE --> {$variableName}
echo "My name is {$firstName} 3 ";















ESSA É A MELHOR SINTAXE QUE VC PODE USAR, PARA ESSE PROPÓSITO...














------------ 











--> OUTRA MANEIRA 

DE OUTPUTTAR 



TEXT EM VARIABLES
 


 É ___ ""CONCATENAR TEXT __ COM 1 VARIABLE""











 APRENDEREMOS MAIS SOBRE OPERATORS MAIS TARDE...









 -> O PROFESSOR EXPLICA QUE PODEMOS ESCREVER ASSIM:













 echo 'Hello ' . $firstName;













 ESSE DOT (.),
 AQUI,

 É UM __ CONCATENATION OPERATOR...










 EX:










 // SINTAXE --> {$variableName}
echo "My name is {$firstName} 3 ";






echo 'Hello ' . $firstName, ', ', 'How Are You?';     ## "." (DOT) é o CONCATENATION OPERATOR DO PHP... (como "+" no javascript)















COM ISSO,

JÁ COBRIMOS:






1)  COMO RODAR O PHP NA COMMAND LINE 


2) COMO RODAR O PHP NO BROWSER....














-> OK, MAS COMO DIABOS PODEMOS ACTUALLY FAZER EMBED 


DE PHP EM HTML?







BEM, PRIMEIRAMENTE DEVEMOS SUBSTITUIR TUDO AQUI 





POR 



1 HTML BÁSICO...














TIPO ASSIM:












<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    
</body>
</html>












CERTO....







AGORA DIGAMOS QUE 
QUEREMOS 




PRINTAR ""HELLO WORLD"" EM VEZ DESSE HEADING BÁSICO...












EX:











<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    

    EXEMPLO
</body>
</html>















--> DIGAMOS QUE QUEREMOS PRINTAR HELLO WORLD EM VEZ DE ""EXEMPLO""...














--> BEM, NOVAMENTE,

CONFORME O PROFESSOR HAVIA MENCIONADO...






SE VC DESEJA 

EXECUTAR CÓDIGO


PHP 



EM ALGUM LUGAR,


VC 





TEM QUE ENCLOSAR 


O PHP 


NAS TAGS 

DE 


<?php e ?>














É POR ISSO QUE O PROFESSOR ESCREVE TIPO ASSIM:











<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>



    <?php

    // é assim que PODEMOS FAZER EMBED DE CÓDIGO PHP, A SER EXECUTADO, DENTRO DE NOSSOS ARQUIVOS HTML...
    


    echo 'Hello World';
    ?>
    
</body>
</html>






















OK... QUER DIZER QUE É BEM MAIS SIMPLES DO QUE EU IMAGINAVA...









--> VOCE SÓ PRECISA TER ESSES ARQUIVOS .php (como index.php),




e aí 


COLOCAR 


SEU CÓDIGO A SER EXECUTADO, PHP,


DENTRO 




DA OPENING E CLOSING 

TAGS,




dentro 

de 1 arquivo index.php (



    e pode colocar essas opening e closing tags 

    dentro 


    do código html, mesmoo...
)













--> CERTO... MAS O PROFESSOR NOS EXPLICA QUE 

EXISTE 

UMA 

VERSAO 

MAIS CURTA 



DESSA SINTAXE...











-> A VERSAO MAIS CURTA É 



BASICAMENTE




<?=    ?>














OK.... MAS ESSE CÓDIGO AÍ É MAL RECONHECIDO POR MEU IDE...











->  TIPO ASSIM:












<!-- 
   <!--  ## <?php ##
   
   // é assim que PODEMOS FAZER EMBED DE CÓDIGO PHP, A SER EXECUTADO, DENTRO DE NOSSOS ARQUIVOS HTML...
   


   echo 'Hello World';

   ## O CÓDIGO VISTO MAIS ABAIXO É BASICAMENTE A MESMA COISA QUE  ESCREVER ESSE CÓDIGO PHP AQUI, MAS SEM TER DE ESCREVER ""ECHO"" DEPOIS...
   ?>







<?= " EXEMPLO " ?>
    




























--> OK... QUER DIZER QUE 


A __ ABREVIAÇAO DA ESCRITA DE <?php  ?> + echo ""alguma coisa""





É REALMENTE 



ESSE 


<?=  ?>















-> QUER DIZER QUE 

SE VC PRECISA PRINTAR ALGUMA COISA,

VC 

DEVE USAR 

ESSA SHORTHAND VERSION...








-> SE FOR SÓ O SIMPLES PRINT DE ALGUMA COISA,

USE ESSA VERSAO SHORTHAND...
















-> mas se vc PRECISA 





__PROCESSAR ALGUM CÓDIGO PHP,

AÍ VC 



PRECISARÁ 

ENCLOSAR 

SEU PHP CODE BLOCK 



COM 


<?php ?>








--> EX:












<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>


<!-- 
    ## <?php ##
    
    // é assim que PODEMOS FAZER EMBED DE CÓDIGO PHP, A SER EXECUTADO, DENTRO DE NOSSOS ARQUIVOS HTML...
    //    PARA EXECUTES DE CÓDIGO PHP, PARA COISAS MAIS NORMAIS/COMPLEXAS, VC USARÁ ESSA SINTAXE (e nao a de baixo, em EXEMPLO, que só serve para o OUTPUT DE CONTEÚDO DE FORMA SIMPLES NA PÁGINA)...
    

    echo 'Hello World';

    ## O CÓDIGO VISTO MAIS ABAIXO É BASICAMENTE A MESMA COISA QUE  ESCREVER ESSE CÓDIGO PHP AQUI, MAS SEM TER DE ESCREVER ""ECHO"" DEPOIS...
    ?>







<?= " EXEMPLO " ?>
    
</body>
</html>

























--------> OUTRO DETALHE --> TAMBÉM PODEMOS 

FAZER 



""ECHO OUT'"



DE HTML 
DIRETAMENTE 



DO 


ARQUIVO PHP...










como exemplo disso,





O PROFESSOR PEGA 


O CÓDIGO 





PHP, COM VARIABLES,


E AÍ 

DECIDE 
FAZER 


""ECHO""



DE HTML,




de dentro do código php..








tipo assim:







<?php

    $x = 10;
    $y = 5;

    echo <p>
















TIPO ASSIM:











<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>


<?php ##

// é assim que PODEMOS FAZER EMBED DE CÓDIGO PHP, A SER EXECUTADO, DENTRO DE NOSSOS ARQUIVOS HTML...
//    PARA EXECUTES DE CÓDIGO PHP, PARA COISAS MAIS NORMAIS/COMPLEXAS, VC USARÁ ESSA SINTAXE (e nao a de baixo, em EXEMPLO, que só serve para o OUTPUT DE CONTEÚDO DE FORMA SIMPLES NA PÁGINA)...


echo 'Hello World';

## O CÓDIGO VISTO MAIS ABAIXO É BASICAMENTE A MESMA COISA QUE  ESCREVER ESSE CÓDIGO PHP AQUI, MAS SEM TER DE ESCREVER ""ECHO"" DEPOIS...


$x = 10;
$y = 5;

echo '<h4>' . $x . ', ' . $y . '</h4>'; ## também podemos fazer ECHO/OUTPUT DE CONTEÚDO HTML _ DE DENTRO DE NOSSO PHP....


?>







<?= " EXEMPLO " ?>
    
</body>
</html>





















--> ESSE ""ECHO"" DE DENTRO DO PHP,



ECHO DE HTML,


PODE SER 


ÚTIL PARA __ 

OUTPUTTAR __ 



HTML DINAMICAMENTE.. --------> ENTRETANTO,


O PROFESSOR 


__ DIZ _ QUE _ 
NAO É 

UMA BOA IDEIA 

MIXAR 




__ HTML __ DIRETAMENTE NO SEU PHP...











-> O PROFESSOR FALARÁ SOBRE 


A SEPARACAO 

ENTRE PRESENTATIONAL LOGIC E BUSINESS LOGIC 




EM VIDEOS FUTUROS...














--> OK, MAS COMO 
PODEMOS 

COMENTAR CÓDIGOS PARA FORA...?












bem, 

1 maneira DE DEIXAR COMMENTS 


É 




COM O USO DE // -------> ISSO COMENTA 




1 ÚNICA LINE...









 
## --> é outra maneira  DE ESCREVER 1 SINGLE LINE DE COMMENT...












-> SE VC QUER MULTI-LINE COMMENTS,


VC DEVE USAR 

/* */...












-> MESMA COISA QUE OUTRAS LANGUAGES DE PROGRAMACAO/SCRIPTING...














-> E SE VC VIU ALGO ASSIM:





/**
 *
 *
 * este é um DOC BLOCk....
 *
 *
 *
*/












-> É UM DOCBLOCK....











-> VC TIPICAMENTE 

USA ISSO PARA ESCREVER DOCUMENTATION PARA SEU SOURCE CODE...












--> VEREMOS DOC BLOCKS QUANDO 



ANALISARMOS O PHP 
OBJECT-ORIENTED....









--> CERTO... MAS HÁ CERTAS COISAS 


QUE VC PRECISA SABER,
SOBRE COMMENTS...










--> SE VC COLOCA O COMMENT NA MESMA LINHA DE SEU 


__ CLOSING PHP TAG...











--> TIPO ASSIM:








# Comment Content ?> Hello 









-> SE VC FIZER ISSO,




O SEU COMMENT NAO VAI COMMENT OUT 



__ AQUELA CLOSING PHP TAG... --> ISSO QUER DIZER QUE 

SE VC 


COLOCA 

ALGO DEPOIS 

DA TAG,



COMO "hELLO",




ISSO AÍ NAO SERÁ COMMENTED OUT... -> ISSO VAI APARECER NA PÁGINA...












-> OUTRA COISA QUE DEVEMOS FAZER É 





___ 



NUNCA __ ADICIONAR NESTING DE COMMENTS..








-> PQ ISSO VAI RESULTAR EM ERRORS...









-> OK... AGORA 



SABEMOS A SINTAXE BÁSICA...








-> AGORA SABEMOS COMO FAZER ECHO DE ALGO PARA O BROWSER...








-> AGORA SABEMOS COMO RODAR PHP NA COMMAND LINE..








-> SABEMOS COMO EMBED PHP NO HTML...










--> COMO DEFINIR VARIABLES,

COMO ESCREVER 



COMMENTS, ETC..













-> NO PRÓXIMO VIDEO,

VEREMOS:


""CONSTANTS"""




E ""VARIABLE VARIABLES""









VARIABLE VARIABLES --> ISSO SERÁ FÁCIL...